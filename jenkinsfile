pipeline {
    agent any

    environment {
        REGISTRY = 'docker.io'
        IMAGE_FRONTEND = 'gestion-etablissement-frontend'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/maammadoubah-10/mylastpipelinee.git'
            }
        }

        stage('Build & Test Backend') {
            parallel {
                stage('ms-classes') {
                    steps {
                        dir('backend/ms-classes') {
                            sh 'composer install --no-dev --optimize-autoloader'
                            sh 'php artisan migrate --seed'
                            sh 'php artisan test'
                        }
                    }
                }
                stage('ms-cours') {
                    steps {
                        dir('backend/ms-cours') {
                            sh 'composer install --no-dev --optimize-autoloader'
                            sh 'php artisan migrate --seed'
                            sh 'php artisan test'
                        }
                    }
                }
                stage('ms-emplois') {
                    steps {
                        dir('backend/ms-emplois') {
                            sh 'composer install --no-dev --optimize-autoloader'
                            sh 'php artisan migrate --seed'
                            sh 'php artisan test'
                        }
                    }
                }
                stage('ms-etudiants') {
                    steps {
                        dir('backend/ms-etudiants') {
                            sh 'composer install --no-dev --optimize-autoloader'
                            sh 'php artisan migrate --seed'
                            sh 'php artisan test'
                        }
                    }
                }
                stage('ms-professeurs') {
                    steps {
                        dir('backend/ms-professeurs') {
                            sh 'composer install --no-dev --optimize-autoloader'
                            sh 'php artisan migrate --seed'
                            sh 'php artisan test'
                        }
                    }
                }
            }
        }

        stage('Build & Test Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm run test'
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Build ms-classes') {
                    steps { sh "docker build -t $REGISTRY/ms-classes ./backend/ms-classes" }
                }
                stage('Build ms-cours') {
                    steps { sh "docker build -t $REGISTRY/ms-cours ./backend/ms-cours" }
                }
                stage('Build ms-emplois') {
                    steps { sh "docker build -t $REGISTRY/ms-emplois ./backend/ms-emplois" }
                }
                stage('Build ms-etudiants') {
                    steps { sh "docker build -t $REGISTRY/ms-etudiants ./backend/ms-etudiants" }
                }
                stage('Build ms-professeurs') {
                    steps { sh "docker build -t $REGISTRY/ms-professeurs ./backend/ms-professeurs" }
                }
                stage('Build Frontend') {
                    steps { sh "docker build -t $REGISTRY/$IMAGE_FRONTEND ./frontend" }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                sh "echo 'Connexion Ã  Docker Hub...'"
                sh "docker login -u  -p ton_mot_de_passe_docker"
                sh "docker push $REGISTRY/ms-classes"
                sh "docker push $REGISTRY/ms-cours"
                sh "docker push $REGISTRY/ms-emplois"
                sh "docker push $REGISTRY/ms-etudiants"
                sh "docker push $REGISTRY/ms-professeurs"
                sh "docker push $REGISTRY/$IMAGE_FRONTEND"
            }
        }

        stage('Deploy to Dev') {
            steps {
                sh "docker-compose up -d"
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/*.jar', fingerprint: true
        }
    }
}
